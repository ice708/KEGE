# https://education.yandex.ru/ege/task/b5ea1e82-76f7-4781-8ef4-5f462fdc7638

# Два узла, находящиеся в разных подсетях,
# имеют IP-адреса 151.172.115.121 и 151.172.115.156
# В масках обеих подсетей одинаковое количество единиц.
# Укажите наименьшее возможное количество единиц в масках этих подсетей.

# ==========================

# Запустив этот код, вы получите маски подсетей,
# при которых указанные IP-адреса находятся в разных подсетях.

# Объяснение кода:
# 1) Импортируем модуль ipaddress.
# 2) Определяем два IP-адреса.
# 3) Создаем функцию find_subnet_masks, которая перебирает 
# возможные длины префикса от 1 до 32.
# 4) Для каждой длины префикса создаем подсети и проверяем, 
# находятся ли IP-адреса в разных подсетях.
# 5) Если IP-адреса находятся в разных подсетях, 
# выводим соответствующее сообщение.

import ipaddress

# Заданные IP-адреса
ip1 = ipaddress.ip_address('151.172.115.121')
ip2 = ipaddress.ip_address('151.172.115.156')

# Функция для проверки, находятся ли IP-адреса в разных подсетях
def find_subnet_masks(ip1, ip2):
    for prefix_length in range(1, 33):  # Проверяем маски от /1 до /32
        # Создаем подсеть с заданной маской
        subnet1 = ipaddress.ip_network(f'{ip1}/{prefix_length}', strict=False)
        subnet2 = ipaddress.ip_network(f'{ip2}/{prefix_length}', strict=False)
        
        # Проверяем, находятся ли IP-адреса в разных подсетях
        if subnet1 != subnet2:
            print(f'IP-адреса {ip1} и {ip2} находятся в разных подсетях с маской /{prefix_length}')

# Вызов функции
find_subnet_masks(ip1, ip2)